<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Just A Startup Guy]]></title>
  <link href="http://ericzou.github.io/blog/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://ericzou.github.io/blog/"/>
  <updated>2013-08-01T17:24:12-07:00</updated>
  <id>http://ericzou.github.io/blog/</id>
  <author>
    <name><![CDATA[Eric Zou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Wake up and smell the (slow) tests]]></title>
    <link href="http://ericzou.github.io/blog/2013/06/19/wake-up-and-smell-the-tests/"/>
    <updated>2013-06-19T09:01:00-07:00</updated>
    <id>http://ericzou.github.io/blog/2013/06/19/wake-up-and-smell-the-tests</id>
    <content type="html"><![CDATA[<p>I've been on many projects where writing/running tests were painfully slow.  To test one line of change often requires me to construct a bunch of unrelated models, fix a few failures in other tests and then patiently wait an hour or two for the tests suite to pass locally and on CI.</p>

<p>Even worse, the developers are often proud of themselves for writing the tests first to have an excellent test coverage.  These painfully slow processes for writing/running tests are often accepted as the cost of doing TDD.</p>

<p>It is not. These painfully slow tests are a clear hint that the code/test can be structured better.  Rather than blindly writing more tests, I usually ask myself the following questions.</p>

<h3>Do my tests have too many inter-process communications?</h3>

<p>Inter-process communications are an order of magnitutue slower than in-memory communications.  Mock out the interfaces if that's the case.  Better yet, try to design a system where these external connections are explicitly inversely injected.  Then during the test all is needed is just to swap in a fake connection.</p>

<h3>Am I testing at the right level?</h3>

<p>Integration tests are a necessary evil and need to be treated as such.  Writing an integration test for an 'if' statement change in the model can often be inappropriate.  Unfortunately, many developers thinks
the more the better when writing integration tests, which often leads to a bloated test suite.</p>

<h3>Is my test setup complicated?</h3>

<p>If I have to create lots of objects to be able to test my object then that's usually a sign the objects are too coupled together.  I've seen this happen to a lot in Rails projects since the framework itself does very little to prevent this.  If I spend more time setting up the tests than actually writing it, I would investigate it a bit to see if I can decouple the code dependencies.</p>

<h3>Can I modulize part of the project?</h3>

<p>Modulized code base means a decoupled structure, which leads to a simplier test setup, smaller test suites, and faster test runs.</p>

<h3>Are my tests too 'meta'</h3>

<p>Writing tests that generates more tests seems clever but there actually lots of problems:</p>

<ul>
<li><p>Very easy to go overboard with it:
In one of my projects, we went 'meta' for generating access control tests - a test for every role (guest, user, admin, etc), and every path combination to make sure current users can/cannot access certain pages. That alone, generated thousands of tests and took a very long time to run.</p></li>
<li><p>Lots of valueless tests:
With tests like these, we often try to test every possible scenario. but when we really only care about the common cases and edge cases.</p></li>
<li><p>Too abstract:
The intent of each test should be very clear and easy to read but that's usually not the case when tests are 'meta'.</p></li>
<li><p>Hard to debug:
It's often hard to run a single generated test without running the entire thing and the line numbers are usually wrong.</p></li>
</ul>


<h3>Does my test code look boring or repetitive?</h3>

<p>Tests should be interesting to write.  If they look repetitive, that usually signals repeated usage of code or code that have a common pattern with slight variations.  If this occurs, I would review and try to see if I can extract the common pattern out into a behavior and create a separate test just for that behavior.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using AngularJS for existing Rails app]]></title>
    <link href="http://ericzou.github.io/blog/2013/05/03/using-angularjs-for-existing-rails-app/"/>
    <updated>2013-05-03T21:05:00-07:00</updated>
    <id>http://ericzou.github.io/blog/2013/05/03/using-angularjs-for-existing-rails-app</id>
    <content type="html"><![CDATA[<p>In one of my projects, we were tasked to put AngularJS on top of an existing Rails app.  We wanted to keep the business impact at a minimum.  This means that we had to gradually make the transition while adding more end-user features.</p>

<p>Since retro fitting a client side framework is pretty common for many Rails apps, I'm going to share some of the problems I've encoutered, and possible approaches I used.</p>

<h2>HAML or HTML?</h2>

<p>Our views were written in haml and generated from the server side. I liked it and would like to continue using it for generating view markup. Unfortunatelly, we didn't find a javascript library that work <em>exact</em> the same as ruby's haml.</p>

<p>We ended up created a <code>TemplatesController</code> and route all of the template fetching requests though this <code>TemplatesController</code>. From browser's perspective, we are still serving static HTML, but we were able to write it in HAML from the server side.</p>

<p>```ruby</p>

<h1>TemplatesController</h1>

<p>class TemplatesController
  def show</p>

<pre><code>path = params[:path]
render file: "/views/templates/#{path}", handler: [:haml], layout: false
</code></pre>

<p>  end
end
```</p>

<p>```ruby</p>

<h1>router.rb</h1>

<h1>routes template/* to a template controller</h1>

<p>match '/template/*path' => 'templates#show'
```</p>

<p>One added benefit was that because we are still on the server side, we have access to things like <code>User::ROLES</code> and <code>I18n.t 'store.title'</code>, which we otherwise have to duplicate at the client side.</p>

<h2>Do we have to write validations twice?</h2>

<p>I really like the ActiveRecord error messages. It has good defaults, easily configurable, and intergate well with i18n. At the same time, I want the good user experience thatâ€™s provided by the client-side validation. Refreshing the page to see errors is so 2008.</p>

<p>I also don't want to write our validations and messages twice. The server side already has validations, we just need to pipe the error messages out to the page via ajax. Its easy with AngualrJS</p>

<p>
```html
<form action='/users', methpd='post'>
  <fieldset></p>

<pre><code>&lt;label&gt;Name&lt;/label&gt;
&lt;input type='text' ng-model='name' /&gt;
&lt;div&gt;{{errors['name']}}&lt;/div&gt;
</code></pre>

<p>  </fieldset>
  <input type='submit' ng-click='submit' />
</form>
```
</p>

<p>```javascript
function FooCtrl ($scope) {
  $scope.submit = function () {</p>

<pre><code>httpRequest({}, scope.success, scope.setErrors)
</code></pre>

<p>  };</p>

<p>  $scoppe.setErrors = function (response) {</p>

<pre><code>scope.errors = response.data.errors
</code></pre>

<p>  }
}</p>

<p>```</p>

<p>Every time the user clicks submit, without any client-side validation, the form issues an ajax request. We rely on ActiveRecord to do the validation, feed us with the correct error messages, and store the errors in an errors object in javascript, with Angular's two-way binding. The view then gets updated automatically.</p>

<p>Note: The approach works for us becuase our application only validates the input after the user attempts to submit the form. It might not work well in your case.</p>

<h2>Turn functions into services</h2>

<p>We use CanCan for access control. In the view, we show and hide certain elements depending on the current user's role. The code snippet below hides the Edit button if <code>current_user</code> does not have the <code>ability</code> to <code>manage</code> <code>Post</code>.</p>

<p>```haml
  - if current_user.ability.can?(:manage, Post)</p>

<pre><code>&lt;button&gt;Edit&lt;/button&gt;
</code></pre>

<p>```</p>

<p>Since we are switching to client side templates, we don't have direct access to <code>ability</code> object anymore, but we can turn the CanCan ability into a service call. A get request to <code>/abilities.json</code> will return something like this for the current user:</p>

<p>```json
{
  "manage": {</p>

<pre><code>"User": true,
"Post": false,
...
</code></pre>

<p>  },
  "read": {</p>

<pre><code>"User": true,
"Post": true
...
</code></pre>

<p>  },
  "Update": {</p>

<pre><code>"User": true,
"Post": false
</code></pre>

<p>  }
  ...
}
```</p>

<p>In the view, we can choose to show/hide elements based on the user's role again.</p>

<p><code>html
  &lt;button ng-show="canManage('User')"&gt;
</code></p>

<p>```javascript
  function FooCtrl () {</p>

<pre><code>scope.canManage = function (model) {
  scope.manage[model]
};
</code></pre>

<p>  }
```</p>
]]></content>
  </entry>
  
</feed>
